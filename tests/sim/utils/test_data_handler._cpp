
#include <catch.hpp>
#include "common_log.hpp"

#include "handler/data_handler.hpp"


#include <catch2/matchers/catch_matchers_floating_point.hpp>

#include <cstdint>
#include <cstring>
#include <iostream>

using namespace ssp4cpp;
using namespace ssp4cpp::sim::handler;



TEST_CASE("DataHandler handles BOOL type", "[DataHandler][BOOL]")
{
    common::Logger log = common::Logger("Test::DataHandler", common::LogLevel::debug);
    log.ext_trace("[{}] init", __func__);
    DataHandler mgr(3);
    uint64_t ref = mgr.initData(DataType::Boolean, "");

    bool v1 = true;
    bool v2 = false;
    log.ext_trace("[{}] set data", __func__);
    mgr.setData(100, ref, &v1);
    mgr.setData(200, ref, &v2);
    
    log.ext_trace("[{}] get data 1", __func__);
    void *data1 = mgr.getData(150, ref);
    REQUIRE(data1 != nullptr);
    REQUIRE(*static_cast<bool *>(data1) == true);
    
    log.ext_trace("[{}] get data 2", __func__);
    void *data2 = mgr.getData(250, ref);
    log.ext_trace("[{}] get data 2 after", __func__);
    REQUIRE(data2 != nullptr);
    REQUIRE(*static_cast<bool *>(data2) == false);
    log.ext_trace("[{}] complete", __func__);
}

TEST_CASE("DataHandler handles INT type", "[DataHandler][INT]")
{
    DataHandler mgr(3);
    uint64_t ref = mgr.initData(DataType::Integer, "");

    int v1 = 42;
    int v2 = -7;
    mgr.setData(100, ref, &v1);
    mgr.setData(200, ref, &v2);

    void *data1 = mgr.getData(150, ref);
    REQUIRE(data1 != nullptr);
    REQUIRE(*static_cast<int *>(data1) == 42);

    void *data2 = mgr.getData(250, ref);
    REQUIRE(data2 != nullptr);
    REQUIRE(*static_cast<int *>(data2) == -7);
}

TEST_CASE("DataHandler handles REAL type", "[DataHandler][REAL]")
{
    DataHandler mgr(3);
    uint64_t ref = mgr.initData(DataType::Real, "");

    double v1 = 3.14; 
    double v2 = 2.71;
    mgr.setData(100, ref, &v1);
    mgr.setData(200, ref, &v2);

    void *data1 = mgr.getData(150, ref);
    REQUIRE(data1 != nullptr);
    REQUIRE_THAT(*static_cast<double *>(data1), Catch::Matchers::WithinAbs(3.14, 0.01));

    void *data2 = mgr.getData(250, ref);
    REQUIRE(data2 != nullptr);
    REQUIRE_THAT(*static_cast<double *>(data2), Catch::Matchers::WithinAbs(2.71, 0.01));
}

TEST_CASE("DataHandler handles STRING type", "[DataHandler][STRING]")
{
    DataHandler mgr(3);
    uint64_t ref = mgr.initData(DataType::String, "");

    const char* v1 = "foo";
    const char* v2 = "bar";
    mgr.setData(100, ref, (void*)v1);
    mgr.setData(200, ref, (void*)v2);

    void *data1 = mgr.getData(150, ref);
    REQUIRE(data1 != nullptr);
    REQUIRE(std::string((char*)data1) == "foo");

    void *data2 = mgr.getData(250, ref);
    REQUIRE(data2 != nullptr);
    REQUIRE(std::string((char*)data2) == "bar");
}

TEST_CASE("DataHandler handles ENUM type", "[DataHandler][ENUM]")
{
    DataHandler mgr(3);
    uint64_t ref = mgr.initData(DataType::Enumeration, "");

    int v1 = 1; // enums stored as int
    int v2 = 2;
    mgr.setData(100, ref, &v1);
    mgr.setData(200, ref, &v2);

    void *data1 = mgr.getData(150, ref);
    REQUIRE(data1 != nullptr);
    REQUIRE(*static_cast<int *>(data1) == 1);

    void *data2 = mgr.getData(250, ref);
    REQUIRE(data2 != nullptr);
    REQUIRE(*static_cast<int *>(data2) == 2);
}

