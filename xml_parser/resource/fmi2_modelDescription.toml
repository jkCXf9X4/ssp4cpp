
[BaseUnit]
kg = { type = "int", optional = true }
m = { type = "int", optional = true }
s = { type = "int", optional = true }
a = { type = "int", optional = true }
k = { type = "int", optional = true }
mol = { type = "int", optional = true }
cd = { type = "int", optional = true }
rad = { type = "int", optional = true }
factor = { type = "double", optional = true }
offset = { type = "double", optional = true }


[DisplayUnit]
name = { type = "string" }
factor = { type = "double", optional = true }
offset = { type = "double", optional = true }


[fmi2Unit]
name = { type = "string" }
BaseUnit = { type = "fmi2::BaseUnit", optional = true }
DisplayUnit = { type = "fmi2::DisplayUnit", list = true }


[UnitDefinitions]
Units = { type = "fmi2::fmi2Unit", list = true, xml_tag="Unit"}


[Boolean]
declaredType = { type = "string", optional = true }
start = { type = "string", optional = true }


[Integer]
declaredType = { type = "string", optional = true }
start = { type = "string", optional = true }
quantity = { type = "string", optional = true }
min = { type = "int", optional = true }
max = { type = "int", optional = true }


[String]
declaredType = { type = "string", optional = true }
start = { type = "string", optional = true }


[Real]
declaredType = { type = "string", optional = true }
quantity = { type = "string", optional = true }
unit = { type = "string", optional = true }
displayUnit = { type = "string", optional = true }
relativeQuantity = { type = "bool", optional = true }
min = { type = "double", optional = true }
max = { type = "double", optional = true }
nominal = { type = "double", optional = true }
unbounded = { type = "bool", optional = true }
start = { type = "double", optional = true }
derivative = { type = "unsigned int", optional = true }
reinit = { type = "bool", optional = true }


[Enumeration]
declaredType = { type = "string" }
quantity = { type = "string", optional = true }
min = { type = "int", optional = true }
max = { type = "int", optional = true }
start = { type = "int", optional = true }


[SimpleTypeEnumerationItem]
name = { type = "string" }
value = { type = "int" }
description = { type = "string", optional = true }


[SimpleTypeEnumeration]
quantity = { type = "string", optional = true }
Items = { type = "fmi2::SimpleTypeEnumerationItem", list = true, xml_tag="Item" }


[fmi2SimpleType]
name = { type = "string" }
description = { type = "string", optional = true }
Real = { type = "fmi2::Real", optional = true }
Integer = { type = "fmi2::Integer", optional = true }
Boolean = { type = "fmi2::Boolean", optional = true }
String = { type = "fmi2::String", optional = true }
Enumeration = { type = "fmi2::SimpleTypeEnumeration", optional = true }


[TypeDefinitions]
SimpleTypes = { type = "fmi2::fmi2SimpleType", list = true, xml_tag="SimpleType"}


[Category]
name = { type = "string" }
description = { type = "string", optional = true }


[LogCategories]
Categories = { type = "fmi2::Category", list = true, xml_tag="Category"}


[fmi2Annotation]
annotation = { type = "string" }


[VendorAnnotations]
Annotations = { type = "fmi2::fmi2Annotation", list = true , xml_tag="Annotation"}


[DefaultExperiment]
startTime = { type = "double", optional = true }
stopTime = { type = "double", optional = true }
tolerance = { type = "double", optional = true }
stepSize = { type = "double", optional = true }


[fmi2ScalarVariable]
name = { type = "string" }
valueReference = { type = "unsigned int", optional = true }
description = { type = "string", optional = true }
causality = { type = "string", optional = true }
variability = { type = "string", optional = true }
initial = { type = "string", optional = true }
canHandleMultipleSetPerTimeInstant = { type = "bool", optional = true }
Real = { type = "fmi2::Real", optional = true }
Integer = { type = "fmi2::Integer", optional = true }
Boolean = { type = "fmi2::Boolean", optional = true }
String = { type = "fmi2::String", optional = true }
Enumeration = { type = "fmi2::Enumeration", optional = true }
Annotations = { type = "fmi2::fmi2Annotation", list = true , xml_tag="Annotation"}

#Custom
index = {type="int", custom="type"}


[Unknown]
index = { type = "int" }
dependencies = { type = "IntList", optional = true }
dependenciesKind = { type = "fmi2::DependenciesKindList", optional = true }

[Outputs]
Unknowns = { type = "fmi2::Unknown", list = true, xml_tag="Unknown" }

[Derivatives]
Unknowns = { type = "fmi2::Unknown", list = true, xml_tag="Unknown" }

[InitialUnknowns]
Unknowns = { type = "fmi2::Unknown", list = true, xml_tag="Unknown" }

[ModelStructure]
Outputs = { type = "fmi2::Outputs", optional = true }
Derivatives = { type = "fmi2::Derivatives", optional = true }
InitialUnknowns = { type = "fmi2::InitialUnknowns", optional = true }

[ModelVariables]
ScalarVariable = { type = "fmi2::fmi2ScalarVariable", list = true }

#Custom
f1 = {type="fmi2::fmi2ScalarVariable get_variable(int index);", custom="function"}

[File]
name = { type = "string" }

[SourceFiles]
Files = { type = "fmi2::File", list = true, xml_tag="File" }

[ModelExchange]
modelIdentifier = { type = "string" }
needsExecutionTool = { type = "bool", optional = true }
completedIntegratorStepNotNeeded = { type = "bool", optional = true }
canBeInstantiatedOnlyOncePerProcess = { type = "bool", optional = true }
canNotUseMemoryManagementFunctions = { type = "bool", optional = true }
canGetAndSetFMUstate = { type = "bool", optional = true }
canSerializeFMUstate = { type = "bool", optional = true }
providesDirectionalDerivatives = { type = "bool", optional = true }
SourceFiles = { type = "fmi2::SourceFiles", optional = true }


[CoSimulation]
modelIdentifier = { type = "string" }
needsExecutionTool = { type = "bool", optional = true }
canHandleVariableCommunicationStepSize = { type = "bool", optional = true }
canInterpolateInputs = { type = "bool", optional = true }
maxOutputDerivativeOrder = { type = "bool", optional = true }
canRunAsynchronuously = { type = "bool", optional = true }
canBeInstantiatedOnlyOncePerProcess = { type = "bool", optional = true }
canNotUseMemoryManagementFunctions = { type = "bool", optional = true }
canGetAndSetFMUstate = { type = "bool", optional = true }
canSerializeFMUstate = { type = "bool", optional = true }
providesDirectionalDerivatives = { type = "bool", optional = true }
SourceFiles = { type = "fmi2::SourceFiles", optional = true }


[fmi2ModelDescription]
fmiVersion = { type = "string" }
modelName = { type = "string" }
guid = { type = "string" }
description = { type = "string", optional = true }
author = { type = "string", optional = true }
version = { type = "string", optional = true }
copyright = { type = "string", optional = true }
license = { type = "string", optional = true }
generationTool = { type = "string", optional = true }
generationDateAndTime = { type = "string", optional = true }
variableNamingConvention = { type = "string", optional = true }
numberOfEventIndicators = { type = "string", optional = true }
ModelExchange = { type = "fmi2::ModelExchange", optional = true }
CoSimulation = { type = "fmi2::CoSimulation", optional = true }
UnitDefinitions = { type = "fmi2::UnitDefinitions", optional = true }
TypeDefinitions = { type = "fmi2::TypeDefinitions", optional = true }
LogCategories = { type = "fmi2::LogCategories", optional = true }
DefaultExperiment = { type = "fmi2::DefaultExperiment", optional = true }
VendorAnnotations = { type = "fmi2::VendorAnnotations", optional = true }
ModelVariables = { type = "fmi2::ModelVariables" }
ModelStructure = { type = "fmi2::ModelStructure" }
